{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","togglemode","role","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","handleUpclick","newText","toUpperCase","showAlert","handleLowclick","toLowerCase","handleCapitalise","lowerCase","handle","slice","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraspace","split","join","speak","msg","SpeechSynthesisUtterance","window","speechSynthesis","handleClear","length","Alert","alert","class","word","Capitalise","App","setmode","setalert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"0LAkEeA,MA7DCC,GAEZC,IAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCJ,EAAMK,KAAI,QAAAD,OAAOJ,EAAMK,OACvEJ,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAC9BN,EAAMO,OAETN,IAAAC,cAAA,UACEC,UAAU,iBACVK,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEXZ,IAAAC,cAAA,QAAMC,UAAU,yBAElBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cb,IAAAC,cAAA,MAAIC,UAAU,mCACZF,IAAAC,cAAA,MAAIC,UAAU,YACZF,IAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAI,UAWhEL,IAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAAgD,UAAfJ,EAAMK,KAAmB,OAAS,UAC/EJ,IAAAC,cAAA,SAAOC,UAAU,mBAAmBa,QAAShB,EAAMiB,WAAYT,KAAK,WAAWU,KAAK,SAASJ,GAAG,2BAChGb,IAAAC,cAAA,SAAOC,UAAU,mBAAmBgB,QAAQ,0BAAyB,UAAuB,UAAfnB,EAAMK,KAAmB,OAAS,QAAQ,YCuDpHe,MAvFGpB,IAEd,MAqDOqB,EAAMC,GAAWC,mBAAS,IAIjC,OACItB,IAAAC,cAAAD,IAAAuB,SAAA,KACAvB,IAAAC,cAAA,OAAKC,UAAU,YAAYsB,MAAO,CAACC,MAAsB,SAAf1B,EAAMK,KAAkB,QAAU,UACxEJ,IAAAC,cAAA,UAAKF,EAAM2B,SACX1B,IAAAC,cAAA,OAAKC,UAAU,QACfF,IAAAC,cAAA,YAAUC,UAAU,eAAesB,MAAO,CAACG,gBAA+B,SAAf5B,EAAMK,KAAkB,UAAY,QAASqB,MAAsB,SAAf1B,EAAMK,KAAkB,QAAU,SAAUwB,MAAOR,EAAMS,SAfxJC,IAEpBT,EAAQS,EAAMC,OAAOH,QAaiLf,GAAG,QAAQmB,KAAK,OAGlNhC,IAAAC,cAAA,UAAQC,UAAU,mBAAmBa,QAjEvBkB,KAElB,IAAIC,EAAUd,EAAKe,cACnBd,EAAQa,GACRnC,EAAMqC,UAAU,yBAA0B,aA6DuB,wBAC7DpC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA3D1BsB,KAEnB,IAAIH,EAAUd,EAAKkB,cACnBjB,EAAQa,GACRnC,EAAMqC,UAAU,yBAA0B,aAuD4B,wBAClEpC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QArDxBwB,KACrB,MAAMC,EAAYpB,EAAKkB,cACjBG,EAASD,EAAU,GAAGL,cAAgBK,EAAUE,MAAM,GAC5DrB,EAAQoB,GACR1C,EAAMqC,UAAU,0BAA2B,aAiD6B,cACpEpC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QAlChC4B,KACb,IAAIvB,EAAOwB,SAASC,eAAe,SACnCzB,EAAK0B,SACLC,UAAUC,UAAUC,UAAU7B,EAAKQ,OACnC7B,EAAMqC,UAAU,sBAAuB,aA8B2B,aAC9DpC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA5B1BmC,KACnB,IAAIhB,EAAUd,EAAK+B,MAAM,QACzB9B,EAAQa,EAAQkB,KAAK,MACrBrD,EAAMqC,UAAU,uBAAwB,aAyBgC,sBACpEpC,IAAAC,cAAA,UAAQM,KAAK,SAASQ,QA3ChBsC,KACV,IAAIC,EAAM,IAAIC,yBACdD,EAAIlC,KAAOA,EACXoC,OAAOC,gBAAgBJ,MAAMC,GAC7BvD,EAAMqC,UAAU,WAAY,YAuCclC,UAAU,wBAAuB,SACvEF,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QAlD7B2C,KAEhBrC,EADc,IAEdtB,EAAMqC,UAAU,YAAa,aA+CsC,eAGnEpC,IAAAC,cAAA,OAAKC,UAAU,YAAYsB,MAAO,CAACC,MAAsB,SAAf1B,EAAMK,KAAkB,QAAU,UACxEJ,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,SAAImB,EAAK+B,MAAM,KAAKQ,OAAO,cAAYvC,EAAKuC,OAAO,eACnD3D,IAAAC,cAAA,SAAI,KAAQmB,EAAK+B,MAAM,KAAKQ,OAAO,iBACnC3D,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAImB,EAAKuC,OAAO,EAAEvC,EAAK,iCCzEpBwC,MARA7D,GAEPA,EAAM8D,OAAS7D,IAAAC,cAAA,OAAK6D,MAAK,eAAA3D,OAAiBJ,EAAM8D,MAAMtD,KAAI,gCAAgCU,KAAK,SAC3FjB,IAAAC,cAAA,cARQ8D,KAChB,MAAMvB,EAAYuB,EAAKzB,cACvB,OAAOE,EAAU,GAAGL,cAAgBK,EAAUE,MAAM,IAMnCsB,CAAWjE,EAAM8D,MAAMtD,OAAe,MAAIR,EAAM8D,MAAMP,KC4D5DW,MAvDf,WACE,MAAO7D,EAAM8D,GAAW5C,mBAAS,UAC1BuC,EAAOM,GAAY7C,mBAAS,MAE7Bc,EAAYA,CAACgC,EAAS7D,KAC1B4D,EAAS,CACPb,IAAKc,EACL7D,KAAMA,IAGR8D,WAAW,KACTF,EAAS,OACR,OAmBL,OACEnE,IAAAC,cAAAD,IAAAuB,SAAA,KAKAvB,IAAAC,cAACH,EAAM,CAACQ,MAAM,YAAYgE,UAAU,QAAQlE,KAAMA,EAAMY,WArBvCA,KACL,UAATZ,GACD8D,EAAQ,QACRtB,SAAS2B,KAAK/C,MAAMG,gBAAiB,UACrCS,EAAU,6BAA8B,WACvCQ,SAAStC,MAAQ,0BAGlB4D,EAAQ,SACRtB,SAAS2B,KAAK/C,MAAMG,gBAAiB,QACrCS,EAAU,8BAA+B,WACxCQ,SAAStC,MAAQ,6BAWpBN,IAAAC,cAAC2D,EAAK,CAACC,MAAOA,IACd7D,IAAAC,cAAA,OAAKC,UAAU,kBAMfF,IAAAC,cAACkB,EAAQ,CAACO,QAAQ,kCAAkCtB,KAAMA,EAAMgC,UAAWA,OChDhEoC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAW1C,SAASC,eAAe,SACpD0C,OACHvF,IAAAC,cAACD,IAAMwF,WAAU,KACfxF,IAAAC,cAACgE,EAAG,QAORO","file":"static/js/main.8a66142b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n              {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'light' ? 'dark' : 'light'}Mode</label>\r\n          </div>\r\n\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\n\r\nNavbar.propTypes ={title: PropTypes.string.isRequired,\r\n                   aboutText: PropTypes.string}\r\n\r\n// Navbar.defaultProps = {title: \"Title here\",\r\n//                       aboutText: \"About Us tell me about\"}\r\n\r\nexport default Navbar;\r\n","import React,{useState} from \"react\";\r\n\r\n// Declare a new state variable, which we'll call \"count\"\r\n// const [count, setCount] = useState(0);\r\n\r\n\r\n\r\nconst TextForm = (props) => {\r\n\r\n    const handleUpclick = () =>{\r\n        // console.log(\"Upclick was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n    \r\n    const handleLowclick = () =>{\r\n        // console.log(\"Upclick was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n    \r\n    const handleCapitalise = () => {\r\n        const lowerCase = text.toLowerCase();\r\n        const handle = lowerCase[0].toUpperCase() + lowerCase.slice(1);\r\n        setText(handle);\r\n        props.showAlert(\"Converted to Capitalise\", \"success\");\r\n    };\r\n    \r\n    const handleClear = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"All clear\", \"success\");\r\n    };\r\n    \r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n        props.showAlert(\"Speaking\", \"success\");\r\n    }\r\n    \r\n    const handleCopy=()=>{\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to ClipBoard\", \"success\");\r\n    }\r\n    \r\n    const handleExtraspace=()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed Extra spaces\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"New Text\" // wrong way to change the state\r\n    // setText(\"New Text\") // Right way to change the state\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" style={{backgroundColor:props.mode === 'dark' ? '#282f50' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\">\r\n            </textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary \" onClick={handleUpclick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLowclick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCapitalise}>Capitalise</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraspace}>Remove Extra Space</button>\r\n            <button type=\"submit\" onClick={speak} className=\"btn btn-primary mx-1\">Speak</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClear}>Clear Text</button>\r\n        </div>\r\n\r\n        <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h2>Your Summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something to preview\"}</p>\r\n            </div>\r\n        </>\r\n  );\r\n};\r\n\r\nexport default TextForm;\r\n","import React from 'react';\r\n\r\nconst Capitalise = (word) => {\r\n    const lowerCase = word.toLowerCase();\r\n    return lowerCase[0].toUpperCase() + lowerCase.slice(1);\r\n};\r\n\r\nconst Alert = (props) => {\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{Capitalise(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert;\r\n","import { useState } from 'react';\nimport React from \"react\";\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type) =>{\n    setalert({\n      msg: message,\n      type: type\n    });\n\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n\n\n  const togglemode = () =>{\n    if(mode === 'light'){\n      setmode('dark');\n      document.body.style.backgroundColor= '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      (document.title = \"TextUtils - Dark mode\");\n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor= 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      (document.title = \"TextUtils - Light mode\");\n    }\n  }\n\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About US\"/> */}\n    {/* <Navbar />  */}\n    {/* <Router> */}\n      \n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} togglemode={togglemode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n\n    {/* <Routes> */}\n      {/* <Route path=\"/about\" element={<About />} /> */}\n      {/* <Route path=\"/\" element={<TextForm heading=\"Enter the Text to analyze below\" mode={mode} showAlert={showAlert}/>} /> */}\n    {/* </Routes> */}\n    <TextForm heading=\"Enter the Text to analyze below\" mode={mode} showAlert={showAlert}/>\n        \n    {/* <About/> */}\n    </div>\n    {/* </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}